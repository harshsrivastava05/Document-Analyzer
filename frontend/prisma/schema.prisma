generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String?         @unique
    emailVerified DateTime?       @map("email_verified")
    image         String?
    accounts      Account[]
    sessions      Session[]
    documents     Document[]
    qnas          QnA[]
    createdAt     DateTime        @default(now()) @map("created_at")
    updatedAt     DateTime        @updatedAt @map("updated_at")

    @@map("users")
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model Document {
    id          String   @id @default(cuid())
    userId      String   @map("user_id")
    title       String?
    driveFileId String   @map("drive_file_id") // Google Drive file ID
    mimeType    String?  @map("mime_type")
    summary     String?  @db.Text
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")

    user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
    qnas QnA[]

    @@index([userId])
    @@map("documents")
}

model QnA {
    id         String   @id @default(cuid())
    userId     String   @map("user_id")
    documentId String   @map("document_id")
    role       String   // 'user' | 'assistant'
    content    String   @db.Text
    createdAt  DateTime @default(now()) @map("created_at")

    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

    @@index([userId, documentId])
    @@map("qnas")
}