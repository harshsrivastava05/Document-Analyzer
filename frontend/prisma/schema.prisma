generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    documents     Document[]
    qnas          QnA[]
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @map("refreshToken")
    access_token      String? @map("accessToken")
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Document {
    id          String   @id @default(cuid())
    userId      String
    title       String?
    driveFileId String // Google Drive file ID
    mimeType    String?
    summary     String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
    qnas QnA[]

    @@index([userId])
}

model QnA {
    id         String   @id @default(cuid())
    userId     String
    documentId String
    role       String // 'user' | 'assistant'
    content    String
    createdAt  DateTime @default(now())

    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

    @@index([userId, documentId])
}
